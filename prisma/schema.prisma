generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id
  leagueIGN         String       @unique @map("league_ign")
  region            Region
  rank              Rank
  main              Role
  secondary         Role
  elo               Int          @default(0)
  externalElo       Int          @default(0) @map("external_elo")
  losses            Int          @default(0)
  wins              Int          @default(0)
  autofillProtected Boolean      @default(false) @map("autofill_protected")
  registeredAt      DateTime     @default(now()) @map("registered_at")
  player            Player[]
  seasonStats       SeasonStats?
}

model Player {
  userId     String   @map("user_id")
  scrimId    Int      @map("scrim_id")
  role       Role
  side       Side
  pregameElo Int      @default(0) @map("pre_game_elo")
  createdAt  DateTime @default(now()) @map("created_at")
  isAutoFill Boolean  @default(false) @map("is_auto_fill")
  isOffRole  Boolean  @default(false) @map("is_off_role")
  champion   String?
  scrim      Scrim    @relation(fields: [scrimId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, scrimId])
}

model Scrim {
  id           Int      @id @default(sequence())
  status       Status   @default(STARTED)
  guildID      String
  region       Region
  winner       Side?
  createdAt    DateTime @default(now()) @map("created_at")
  season       Int      @default(0)
  blueTeamName String   @map("blue_team_name")
  redTeamName  String   @map("red_team_name")
  Draft        Draft?
  players      Player[]
}

model SeasonStats {
  userId String @unique @map("user_id")
  season Int
  wins   Int
  losses Int
  elo    Int
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, season])
}

model Draft {
  scrimId     Int      @unique @map("scrim_id")
  draftRoomId String   @map("draft_room_id")
  bluePicks   String[] @default([]) @map("blue_picks")
  redPicks    String[] @default([]) @map("red_picks")
  blueBans    String[] @default([]) @map("blue_bans")
  redBans     String[] @default([]) @map("red_bans")
  scrim       Scrim    @relation(fields: [scrimId], references: [id], onDelete: Cascade)

  @@id([scrimId, draftRoomId])
}

enum Side {
  RED
  BLUE
}

enum Status {
  STARTED
  REMAKE
  COMPLETED
}

enum Region {
  EUW
  NA
}

enum Rank {
  IRON
  BRONZE
  SILVER
  GOLD
  PLATINUM
  EMERALD
  DIAMOND
  MASTER
  GRANDMASTER
  CHALLENGER
}

enum Role {
  TOP
  JUNGLE
  MID
  BOT
  SUPPORT
}
